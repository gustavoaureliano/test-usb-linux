#include <stdint.h>
#include <stdio.h>
#include <linux/usb/ch9.h>
#include <linux/usbdevice_fs.h>
#include <linux/ioctl.h>

#define MAX_SIZE 10000
#define data_size 18

typedef struct {
	uint8_t lenght;
	uint8_t descriptor_type;
	uint16_t bcd_usb;
	uint8_t class;
	uint8_t sub_class;
	uint8_t protocol;
	uint8_t max_packet_size;
	uint16_t vendor_id;
	uint16_t product_id;
	uint16_t bcd_device;
	uint8_t manufacturer;
	uint8_t product;
	uint8_t serial_number;
	uint8_t num_configurations;
} UsbDescriptor;

void printUsbDescriptor(UsbDescriptor usbDesc) {
	printf("lenght: %x\n", usbDesc.lenght);
	printf("descriptor_type: %x\n", usbDesc.descriptor_type);
	printf("bcd_usb: %x\n", usbDesc.bcd_usb);
	printf("class: %x\n", usbDesc.class);
	printf("sub_class: %x\n", usbDesc.sub_class);
	printf("protocol: %x\n", usbDesc.protocol);
	printf("max_packet_size: %x\n", usbDesc.max_packet_size);
	printf("vendor_id: %x\n", usbDesc.vendor_id);
	printf("product_id: %x\n", usbDesc.product_id);
	printf("bcd_device: %x\n", usbDesc.bcd_device);
	printf("manufacturer: %x\n", usbDesc.manufacturer);
	printf("product: %x\n", usbDesc.product);
	printf("serial_number: %x\n", usbDesc.serial_number);
	printf("num_configurations: %x\n", usbDesc.num_configurations);
}

int main() {
	FILE* my_file = fopen("/dev/bus/usb/001/020", "rb");

	printf("sth %lx\n", USBDEVFS_CONTROL);
	
	if (!my_file) {
		perror("Error opening file");
		return 1;
	}
	UsbDescriptor my_data;
	fread(&my_data, sizeof(my_data), 1, my_file);
	printf("size: %lu\n", sizeof(UsbDescriptor));
	printUsbDescriptor(my_data);
	fclose(my_file);
	return 0;
}
